/* tslint:disable */
/* eslint-disable */
/**
 * ft_transcendence API
 * Because we are the best
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUserDto,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface UsersControllerGetUserRequest {
    id: number;
}

export interface UsersControllerSaveUserRequest {
    createUserDto: CreateUserDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async appControllerGetHelloRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async appControllerGetHello(initOverrides?: RequestInit): Promise<string> {
        const response = await this.appControllerGetHelloRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersControllerGetUserRaw(requestParameters: UsersControllerGetUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersControllerGetUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersControllerGetUser(requestParameters: UsersControllerGetUserRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.usersControllerGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersControllerGetUsersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async usersControllerGetUsers(initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.usersControllerGetUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersControllerSaveUserRaw(requestParameters: UsersControllerSaveUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling usersControllerSaveUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersControllerSaveUser(requestParameters: UsersControllerSaveUserRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.usersControllerSaveUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
